@inject TraderViewModel ViewModel
@using VastralRPG.Game.Helpers

@if (ViewModel.Trader != null)
{
    <Row Margin="Margin.Is2.OnY">
    <Column Class="text-center">
        <Button id="show-trader-btn" Color="Color.Secondary" Margin="Margin.Is1" Clicked="@modal.ShowModal">
            Trader
        </Button>
    </Column>
</Row>
    <Modal @ref="@modal.ModalRef" id="trader-modal">
        <ModalContent Centered="true" Size="ModalSize.Large">
            <ModalHeader>
                <ModalTitle>Trader - @ViewModel.Trader.Name</ModalTitle>
                <CloseButton id="header-close-btn" Clicked="@modal.HideModal" />
            </ModalHeader>
            <ModalBody>
                <Row>
                    <Column ColumnSize="ColumnSize.Is6.OnWidescreen.Is12">
                        <div class="text-center">Your Inventory</div>
                        <Table Bordered="true" Narrow="true" Striped="true" Margin="Margin.Is2.OnY">
                            <TableHeader>
                                <TableHeaderCell>Name</TableHeaderCell>
                                <TableHeaderCell Class="text-center">Qty</TableHeaderCell>
                                <TableHeaderCell Class="text-center">Price</TableHeaderCell>
                                <TableHeaderCell />
                            </TableHeader>
                            <TableBody>
                                @if (ViewModel.Player != null)
                                {
                                    foreach (var item in ViewModel.Player.Inventory.GroupedItems)
                                    {
                                        <TableRow>
                                            <TableRowCell>@item.Item.Name</TableRowCell>
                                            <TableRowCell Class="text-center">@item.Quantity</TableRowCell>
                                            <TableRowCell Class="text-center">@item.Item.Price</TableRowCell>
                                            <TableRowCell Class="text-center">
                                                <Button id="sell-item-btn" Size="Size.Small" Color="Color.Secondary"
                                        Outline="true" Clicked="() => ViewModel.OnSellItem(item.Item)">
                                                    Sell 1
                                                </Button>
                                            </TableRowCell>
                                        </TableRow>
                                    }
                                }
                            </TableBody>
                        </Table>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is6.OnWidescreen.Is12">
                        <div class="text-center">Trader's Inventory</div>
                        <Table Bordered="true" Narrow="true" Striped="true" Margin="Margin.Is2.OnY">
                            <TableHeader>
                                <TableHeaderCell>Name</TableHeaderCell>
                                <TableHeaderCell Class="text-center">Qty</TableHeaderCell>
                                <TableHeaderCell Class="text-center">Price</TableHeaderCell>
                                <TableHeaderCell />
                            </TableHeader>
                            <TableBody>
                                @if (ViewModel.Trader != null)
                                {
                                    foreach (var item in ViewModel.Trader.Inventory.GroupedItems)
                                    {
                                        <TableRow>
                                            <TableRowCell>@item.Item.Name</TableRowCell>
                                            <TableRowCell Class="text-center">@item.Quantity</TableRowCell>
                                            <TableRowCell Class="text-center">@item.Item.Price</TableRowCell>
                                            <TableRowCell Class="text-center">
                                                <Button id="buy-item-btn" Size="Size.Small" Color="Color.Secondary"
                                        Outline="true" Clicked="() => ViewModel.OnBuyItem(item.Item)">
                                                    Buy 1
                                                </Button>
                                            </TableRowCell>
                                        </TableRow>
                                    }
                                }
                            </TableBody>
                        </Table>
                    </Column>
                </Row>
            </ModalBody>
            <ModalFooter>
                <div style="margin: 0 auto">@ViewModel.ErrorMessage</div>
                <Button id="footer-close-btn" Color="Color.Secondary" Clicked="@modal.HideModal">Close</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
}

@code {
    private ModalHelper modal = new Helpers.ModalHelper();

    [Parameter]
    public Trader? Trader { get; set; } = null;

    [Parameter]
    public Player? Player { get; set; } = null;

    [Parameter]
    public EventCallback InventoryChanged { get; set; }

    protected override void OnParametersSet()
    {
        ViewModel.Player = Player;
        ViewModel.Trader = Trader;
        ViewModel.InventoryChanged = InventoryChanged;
    }
}